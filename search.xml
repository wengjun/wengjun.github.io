<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[推荐系统简要介绍]]></title>
    <url>%2F2016%2F12%2F19%2F%E6%8E%A8%E8%8D%90%E7%B3%BB%E7%BB%9F%E7%AE%80%E8%A6%81%E4%BB%8B%E7%BB%8D%2F</url>
    <content type="text"><![CDATA[1、为什么要有推荐系统1）随着网速、网络载体的发展，获取信息变得越来越容易，信息很容易过载，接触的信息量很大（M、G、T、P、E）2）面对海量的商品（比如衣服、音乐、电影，我们也不知道自己到底喜欢什么）3）商家无法有针对性（指有购买可能性的客户）的推销自己的商品，做了很多无用功 2、推荐系统的目的1）从海量的数据中提取有用的信息，用户可以快速找到自己喜欢的物品2）让自己的产品脱颖而出（介绍给适合它的用户）3）最终目的：“诱导”用户消费 3、推荐系统的适用场景1）电子商务：京东、亚马逊2）电影和视频：主演、类型的推荐3）个性化音乐：网易云音乐4）社交网络：人人网推荐的可能认识的人5）阅读：图书或者电子书6）基于位置的推荐：比如我在中关村，推荐附近的餐厅7）个性化邮件：邮件有了优先级、提升工作效率8）个性化广告：增加广告的点击率 4、怎么判断一个好的推荐系统1）用户满意度：通过调查获得（代价很高）2）预测准确度：离线计算（分类器）、在线AB对比实验3）覆盖率：推荐的物品占所有物品的比例4）多样性：80%的动作片和20%的动画片，和用户的爱好一致5）新颖性：用户感兴趣，但是还没有看过的物品6）惊喜度：和用户的历史兴趣不相似，但却让用户觉得满意7）信任度：以用户信任的方式推给用户，用户才会购买8）实时性：推荐最新的物品（比如新闻资讯类的推荐）9）健壮性：比如淘宝的刷单、刷评论，在计算物品分值排序的时候，需要能过滤掉这种作弊的行为10）商业目标*：可以为公司带来多少的营收或者广告的点击率 5、推荐系统的架构设计（同时也是简单的AB测试结构） 6、推荐系统涉及的方法1）基于人口统计学的推荐：年龄、性别、地区2）协同过滤推荐：基于用户/物品的协同过滤3）基于内容的推荐：根据用户之前喜欢过的物品，推荐类似的物品（聚类可以理解为降维）4）混合推荐 加权融合：将多种推荐技术的计算结果加权混合产生推荐，比如将协同过滤的推荐结果和基于内容的推荐结果赋予相同的权重值，由用户判断这种推荐方法的好坏，来不断的调整权重值 变换：根据问题背景和实际情况或要求决定变换采用不同的推荐技术。 混合：同时采用多种推荐技术给出多种推荐结果为用户提供参考。 特征组合：组合来自不同推荐数据源的特征被另一种推荐算法所采用。 层叠：先用一种推荐技术产生一种粗糙的推荐结果，第二种推荐技术在此推荐结果的基础上进一步作出更精确的推荐。 特征扩充：一种技术产生附加的特征信息嵌入到另一种推荐技术的特征输入中。 元级别：用一种推荐方法产生的模型作为另一种推荐方法的输入。5）流行度推荐：topN这是一种推荐流行项的方法(例如最多下载、最多看过、最大影响的项)6）基于隐变量的推荐：比如用户对这篇文章的评分、评论，评分越高代表越喜欢 7、推荐系统会涉及的问题1）冷启动利用用户注册时提供的年龄、性别等数据做粗粒度的个性化。 利用用户的社交网络账号登录（需要用户授权），导入用户在社交网站上的好友信息，然后给用户推荐其好友喜欢的物品。 要求用户在登录时对一些物品进行反馈，收集用户对这些物品的兴趣信息，然后给用户推荐那些和这些物品相似的物品。2）高估系统对用户需求的捕捉能力用户的需求是多变的，其中暗含着某些规律，但却不可能被完全的，彻底的捕捉到，例如用户浏览一个商品页面，可能他对网页上的产品感兴趣，可能他被网页上的代言美女吸引，可能他在为家人准备年货，也可能只是误操作罢了，这些细节被系统感知到的难度太大，所以我们无法知道用户下一步要去做什么，哪又如何推荐，这就要求技术人员有产品思维3）不顾场景，强暴用户需求对商品的推荐还是要放在商品售卖网站，对电影的推荐也请放在电影票售卖网站。浏览这些网站的用户，都带着强烈的隐含需求，但选错了地方，往往形成对用户的“强暴”，用户体验就不是很好，达不到推荐的效果4）其它数据：不同的数据适应不同的算法。例如只有用户的行为数据（例如购买、查看等交互数据），则只能选用简单的算法（例如协同过滤，基于物质扩散的算法等），如果包含用户或物品信息，可以选用较为复杂的算法。一般来说，使用的信息越多，得到的结果越精准。产品类型：每个推荐系统所针对的产品不同（例如买商品的和推荐电影的），所选用的算法也应该是不尽相同的，尽量利用所在产品系统自身的特点，基于位置和不同人群的推荐。性能：是否需要实时推荐。非实时推荐对性能的要求比较低，则可以选用较复杂的算法。实时推荐则对性能要求比较高，一般选择复杂度较低的算法。多样性：精度和多样性的问题。在精度达到要求的情况下可以考虑推荐的多样性 8、从哪些方面提高推荐系统的精度和点击率1）对症下药为了提升推荐系统的效果，首先需要“对症下药”，也就是推荐出来的物品集合可以追溯来源，找到问题。在设计推荐系统的时候，对推荐结果进行“埋点”，带上推荐策略的标识。然后在推荐效果的时候，对各个推荐策略分别统计结果，对比数据可以看出各个算法的优劣。最后，根据推荐统计结果，优化对应的推荐策略，进行分流测试，验证优化方法的有效性2）标签拓展物品信息中很重要的一个特征是标签。好的推荐系统不仅体现在精准性，还有多样性和惊喜度方面的要求。对物品信息进行深层度的挖掘分析，进而对标签进行拓展，也是一种实现上述要求行之有效的方法3）点击反馈和搜索引擎一样，在推荐系统中也存在一个问题：位置。推荐结果在最终展现给用户的时候，不可避免的会有先后之分，好的位置有好的曝光机会。但是最好的位置不代表有最好的推荐效果，比如推荐点击率。即使有更高的推荐点击率也不代表就一定是好的推荐结果。所以要进行点击反馈调权。首先需要基于历史数据，分析每个位置的推荐效果数据，这个时候就可以看出各个位置的推荐系统的差异。然后在推荐的时候，基于推荐物品数据和每个位置的推荐效果数据，对最终的推荐结果顺序进行调整。 9、资料补充 推荐系统实践 机器学习]]></content>
      <categories>
        <category>IT杂谈</category>
      </categories>
      <tags>
        <tag>推荐系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[服务器开发相关总结]]></title>
    <url>%2F2016%2F07%2F11%2F%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%BC%80%E5%8F%91%E7%9B%B8%E5%85%B3%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[序：从写下第一行“Hello World”的tc代码开始，已过去了十年有余，乱七八糟看了许多开发相关的资料，算是做了一点服务器开发相关的工作，想把这些做下总结，算是一个积累。 题记：很喜欢李小龙的一句名言：自信来自于实力，我不敢说这句话，所以我要让自己强大起来。 1、 最重要的是细心也许很多人会说是技术最重要，但我觉得并不是，服务器开发不同于网页或者客户端开发，服务器存储着系统的数据，负责系统的大部分业务处理，所以在部署服务、脚本、和执行一些命令的时候，特别要小心了，有些命令是禁用的，像rm -rf、reboot、shutdown、yum remove等类似的，比如一时误操作，执行了强制删除，但是又不能做数据恢复，那将是毁灭性的事故，这个损失是你承担不起的；yum remove在卸载掉某个软件的时候，会卸载掉对应的所有依赖库，我曾经执行了一次yum remove openssl，但是没想到openssl依赖了几百个系统程序，结果执行之后，像cp、rz这些工具都不能用了，假如真出了这么大的事，也不要着急重启机器啥的，先查查资料，看能不能先做下数据备份，因为一旦重启，机器可能就起不来了，上次我们的服务器做了加密，结果重启之后，不能进入单用户模式、不能读取光驱、硬盘也不能挂载在其它机器上。 2、 耐心服务器开发，琐碎的事情很多，也许只是改一个命令，把文件换一个文件夹之类的，业务开发，需求改变频繁，千万不要因此而烦躁，然后出了失误，那就得不偿失了。 3、 要能很好的与人相处服务器开发，不是一个人在战斗，大部分是团队作战，做好和其它人的沟通，处理好自己和其它人的关系，能很大程度的提高工作效率。 4、 获取知识的能力技术日新月异，更新很快；决定我们以后发展快慢的，是如何获取新知识，从哪获取？1） 网页：尽量选择页面简洁、废话少的网站，这种网站显得会比较专业，有时查资料查到某个人的博客，但是博客里各种感叹，那就可以直接关掉了。2） 看书：基础知识类的书，一般看三遍，第一遍：看目录和序，这本书主要讲什么，看完能得到什么；第二遍：一行一行的看，如果一整天的时间都在看书的话，每天看书速度不能低于70页；第三遍，一页一页快速的过，这时只看粗体字或者小标题，这一遍算是回顾，根据小标题去大致的回忆下这个小节里讲了什么，不用太细。手册类的书，看自己需要的就可以，下次需要了，知道去哪找3） 搜索：搜索就像问问题，拆分出问题点再问，要提炼出想要查找问题的关键词，搜索的原理，就是先对你的问题做分词，拆分出一个个单个的词语，根据关键词，像蜘蛛一样去各种网页找链接，然后根据网页的相关度，用关键词进行排序，如果输入的一句话，意思表达不简洁，很可能就搜索不出结果，或者结果排在很多页之后，这样很影响效率。比如我要查找Linux下内存泄露的跟踪方法，输入：Linux 内存泄露 解决这三个单词，就很容易查找到结果，现在的搜索网页，Google如果不能用了，百度查不到结果，就用Yahoo,用英文搜索，结果有时会好一点。 —————————————华丽丽的分割线—————————————个人觉得，以上属于软价值，下面的属于硬价值，在程序开发的这条路上，决定一个人是否成功，80%靠软价值，20%靠硬价值，当然了硬价值是最重要的，软价值起到很好的辅助作用。—————————————华丽丽的分割线————————————— 5、服务器开发所需要的语言知识无论用什么语言，语法特性是最基础的，如果是主语言，高级特性也是需要了解的。C++：模板、stl实现和内存布局、gdb调试、makefile编写、内存泄露查找Python：Python的运行机制，pdb调试方法，我在centos下只用过gdb查socket堵塞的问题，pdb没用过Java：需要了解内存释放原理，降低gc，了解Java虚拟机运行机制shell：基本的awk、sed命令，可以写简单的程序控制脚本，使用命令分析文件内容 6、常用的设计模式例如单件模式、观察者模式、消费者模式、职责链模式、工厂模式、命令模式等 7、需要掌握的基础知识操作系统原理：主要了解进程、内存的调度方式，Linux下内存的分配方式：slab；这里推荐两本书，Linux内核设计与实现：这本书大概几百页，看书时间不要超过七天；深入理解Linux内核：这本书不用全看，主要看Linux内存实现就可以。tcp/IP协议：可以看那三本书，大概的知道tcp/ip的实现，知道用wireshark抓包，Linux下用tcpdump写到文件中，就可以拿到Windows下用wireshark分析，知道怎么看以太网包头、tcp/IP协议包头，业务数据包；三次握手和四次断开连接的状态图当然是最基本的，http协议，需要大概知道每个字段代表的意思，curl工具使用Unix环境高级开发：这本书1K页左右，看完整本书，不能超过20天Linux系统：基本的Linux命令要知道，知道每个目录下都放什么东西，关注下/proc这个文件夹，里面有系统内存、cpuinfo、进程信息（启动路径、命令、占用的fd、内存布局等） 问题查找方法：1） load average高：用strace跟下进程，看有哪些系统调用调用的频繁2） cpu高，可以用top -p pid，再按shift + H，具体的看到是哪个线程的cpu高，然后用gab attach附加到进程上，锁定线程，按下ctrl + c，看是执行到哪步，重复执行操作一次，看都在哪些函数上执行，如果日志详细的话也可以查找；3）内存占用高：看是物理内存还是虚拟内存，内存分配，不管是在堆或者栈中，都是在虚拟内存中分配，给这块内存初始化或者使用了之后，才是占用的物理内存，可以适当的分配小一点的内存，在使用之前不要初始化，用了多少，加个数字计下数。4) 会用netstat看网络状态：连接状态、发送和接收队列的堆积情况 8、问题解决的思路自上而下、由大到小的查找，而不要陷进某一个函数中，将业务流程化，在关键点调试或者加日志 9、代码编写规范有整体结构意识，把功能模块化，函数功能做到单一，类名、函数名、变量名起好，一看就知道是全局的、私有的，主要功能是做什么的，注释也不用太详细，关键点加上注释，知道一大段代码是干什么的就行。 10、英语这个自然不必说了，目前很多的技术文章，都是英文的，中文翻译过来，有时也有理解上的误差，大部分的技术，还是看官网好一点 11、身体每天都对着电脑，还是要注意身体锻炼，一个健康的身体，可以保证每天都很有活力。]]></content>
      <categories>
        <category>IT杂谈</category>
      </categories>
  </entry>
  <entry>
    <title><![CDATA[我的个人网站今天开通啦]]></title>
    <url>%2F2015%2F12%2F29%2F%E6%88%91%E7%9A%84%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E4%BB%8A%E5%A4%A9%E5%BC%80%E9%80%9A%E5%95%A6%2F</url>
    <content type="text"><![CDATA[个人网站今天开通啦，欢迎大家常来逛逛，有好的东西一起分享。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2015%2F12%2F29%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>